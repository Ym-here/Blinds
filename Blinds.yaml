substitutions:
  name_rus: Спальня
  name_eng: Bedroom Blinds
  device_id: bedroom_blinds
  ip_address: 192.168.100.111
  power_save_mode: none
  # device_id: 

  total_steps: '60000'

esphome:
  name: bedroom_blinds
  platform: ESP8266
  board: d1_mini

  on_boot:
      priority: -100.0
      then:
        - lambda: |-
            if (id(end_stop_down).state == true) {
                id(my_stepper).current_position = ${total_steps};
                id(my_stepper).set_target(id(my_stepper).current_position);
                id(last_dir_was_opening) = false;
            }

            if (id(end_stop_up).state == true) {
                id(my_stepper).current_position = 0;
                id(my_stepper).set_target(id(my_stepper).current_position);
                id(last_dir_was_opening) = true;
            }

<<: !include _common_wifi.yaml

logger:
  level: DEBUG    # DEBUG INFO NONE
  baud_rate: 0    # no_serial:

api:

web_server:
  port: 80

globals:

  - id: last_dir_was_opening
    type: bool
    initial_value: "true"

stepper:

  - platform: a4988
    id: my_stepper
    step_pin: 13
    dir_pin: 15
    sleep_pin: 12
    max_speed: 1200 steps/s
    # acceleration: 900
    # deceleration: 900

cover:
  - platform: template
    name: "${name_rus} Шторы"
    id: blinds
    device_class: blind

    open_action:

      - lambda: |-
          id(my_stepper).set_target(0);
          id(last_dir_was_opening) = true;
          id(blinds).current_operation = COVER_OPERATION_OPENING;
      - wait_until:
          lambda: |-
              if (id(my_stepper).current_position == id(my_stepper).target_position) {
                  return true;
              } else {
                  return false;}
      - lambda: |-
          id(blinds).current_operation = COVER_OPERATION_IDLE;
          id(blinds).publish_state();

    close_action:

      - lambda: |-
          id(my_stepper).set_target(${total_steps});
          id(last_dir_was_opening) = false;
          id(blinds).current_operation = COVER_OPERATION_CLOSING;
      - wait_until: 
          lambda: |-
              if (id(my_stepper).current_position == id(my_stepper).target_position) {
                  return true;
              } else {
                  return false;}
      - lambda: |-
          id(blinds).current_operation = COVER_OPERATION_IDLE;
          id(blinds).publish_state();

    stop_action:
      
      - lambda: |-
          id(my_stepper).set_target(id(my_stepper).current_position);
          id(blinds).position = 1 - (float(float(id(my_stepper).current_position) / (${total_steps})));
          id(blinds).current_operation = COVER_OPERATION_IDLE;

    position_action:
      - lambda: |-
          id(my_stepper).set_target(${total_steps} * (1 - pos));
          if(pos > id(blinds).position){
              id(last_dir_was_opening) = true;
              id(blinds).current_operation = COVER_OPERATION_OPENING;
          } else {
              id(last_dir_was_opening) = false;
              id(blinds).current_operation = COVER_OPERATION_CLOSING;}
      - wait_until:
          lambda: |-
              if (id(my_stepper).current_position == id(my_stepper).target_position) {
                  return true;
              } else {
                  return false;}
      - lambda: |-
          id(blinds).current_operation = COVER_OPERATION_IDLE;
          id(blinds).publish_state();

    optimistic: true
    assumed_state: true
    has_position: true

sensor:

  - platform: wifi_signal
    name: "${name_eng} WiFi"
    update_interval: 900s

  - platform: adc
    pin: VCC
    name: "${name_eng} Battery"
    filters:
      - multiply: 1.14
    update_interval: 900s

  - platform: uptime
    name: "${name_eng} uptime"
    filters:
      - lambda: return x / 3600.0;
    unit_of_measurement: hours
    update_interval: 900s

binary_sensor:

  - platform: status
    name: ${name_eng} Status

  - platform: gpio    # Кнопка открытие - стоп - закрыти шторы 50%  25%
    pin: 16
    name: "${name_eng} button"
    internal: true
    filters:
      - delayed_on_off: 30ms

    on_multi_click:
    
    - timing:    # Single-Click open_stop_close
      - ON for at most 300ms
      - OFF for at least 210ms
      then:
        - script.execute: script_open_stop_close

    - timing:    # Double-Click 50%
      - ON for at most 300ms
      - OFF for at most 200ms
      - ON for at most 300ms
      - OFF for at least 210ms
      then:
        - lambda: |-
            auto call = id(blinds).make_call();
            call.set_position(0.5);
            call.perform();
            ESP_LOGD("main", "Double-Clicked 50 ");

    - timing:    # TRIPLE-Click 25%
      - ON for at most 300ms
      - OFF for at most 200ms
      - ON for at most 300ms
      - OFF for at most 200ms
      - ON for at most 300ms
      - OFF for at least 50ms
      then:
        - lambda: |-
            auto call = id(blinds).make_call();
            call.set_position(0.25);
            call.perform();
            ESP_LOGD("main", "TRIPLE-Clicked 25 ");

  - platform: gpio    # Штора поднялась вверх до конца
    pin:
      number: 4
      mode: INPUT_PULLUP
      inverted: true
    name: "${name_eng} end_stop_up"
    id: end_stop_up
    filters:
      - delayed_on: 80ms
      - delayed_off: 300ms
    # internal: true
    on_press:
      then:
        - lambda: |-
            id(my_stepper).current_position = 0;
            id(my_stepper).set_target(id(my_stepper).current_position);
            id(last_dir_was_opening) = true;

  - platform: gpio    # Штора опустилась вниз до конца
    pin:
      number: 14
      mode: INPUT_PULLUP
      inverted: true
    name: "${name_eng} end_stop_down"
    id: end_stop_down
    filters:
      - delayed_on: 80ms
      - delayed_off: 300ms
    # internal: true
    on_press:
      then:
        - lambda: |-
            id(my_stepper).current_position = ${total_steps};
            id(my_stepper).set_target(id(my_stepper).current_position);
            id(last_dir_was_opening) = false;
            // ESP_LOGD("main", "state %s", id(ha_sun).state.c_str());

  - platform: gpio    # Датчик открытия окна
    pin:
      number: 5
      mode: INPUT_PULLUP
      # inverted: true
    name: "${name_rus} окно"
    device_class: window

text_sensor:

  - platform: wifi_info
    ip_address:
      name: ${name_eng} IP Address
      icon: mdi:ip-network

  - platform: homeassistant
    id: ha_sun
    entity_id: sun.sun

switch:

  - platform: template    # Свитч для упрощения внешнего управления шторой 
    name: "${name_eng} switch"
    id: blinds_switch
    turn_on_action:
      - script.execute: script_open_stop_close

  - platform: restart
    name: "${name_eng} Restart"

script:

  - id: script_open_stop_close
    then:
      - lambda: |-
          if (id(blinds).current_operation == CoverOperation::COVER_OPERATION_IDLE) {
          //blinds is stopped
              if (id(last_dir_was_opening) == true) {
                  auto call = id(blinds).make_call();
                  call.set_command_close();
                  call.perform();
              } else {
                  auto call = id(blinds).make_call();
                  call.set_command_open();
                  call.perform();
              }
          } else {
          //blinds is moving
              auto call = id(blinds).make_call();
              call.set_command_stop();
              call.perform();
          }

